// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_QZNOD7U3Izcn@ep-proud-river-a1spb2ae-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require"
}

model User {
  id        String       @id // This will store Clerk's userId (e.g. "user_abc123")
  username  String? // Optional: can be synced from Clerk
  chats     ChatMember[]
  messages  Message[]
  createdAt DateTime     @default(now())
}

model Chat {
  id           String       @id @default(uuid())
  name         String? // Optional for group chats
  isGroup      Boolean // true = group chat, false = 1-1 chat
  members      ChatMember[]
  messages     Message[]
  createdAt    DateTime     @default(now())
  last_message String? // Optional last message shown in chat list
}

model ChatMember {
  id       String   @id @default(uuid())
  chat     Chat     @relation(fields: [chatId], references: [id])
  chatId   String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  joinedAt DateTime @default(now())

  @@unique([chatId, userId]) // Prevent duplicate members
}

model Message {
  id        String   @id @default(uuid())
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  content   String? // Text message
  imageUrl  String? // For image messages
  videoUrl  String? // For video messages
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
